{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mina/Code/stock-frontend-v2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/mina/Code/stock-frontend-v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Axios from \"axios\";\nimport { GET_ALL_COUNTRIES_SUCCESS, GET_ALL_COUNTRIES_ERROR, GET_STOCKS_COUNTRY_DATA_SUCCESS, GET_STOCKS_COUNTRY_DATA_ERROR, GET_ALL_INDUSTRIES_DATA_SUCCESS, GET_ALL_INDUSTRIES_DATA_ERROR } from \"./actionTypes\";\nexport var GET_ALL_COUNTRIES_DATA = function GET_ALL_COUNTRIES_DATA() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dispatch) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return Axios.get(\"/api/stocks/countries\");\n          case 3:\n            result = _context.sent;\n            dispatch({\n              type: GET_ALL_COUNTRIES_SUCCESS,\n              payload: result.data.countries\n            });\n            _context.next = 10;\n            break;\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: GET_ALL_COUNTRIES_ERROR,\n              error: _context.t0\n            });\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n_c = GET_ALL_COUNTRIES_DATA;\nexport var GET_STOCKS_COUNTRY_DATA = function GET_STOCKS_COUNTRY_DATA() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dispatch) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return Axios.get(\"/api/stocks/stockcountry\");\n          case 3:\n            result = _context2.sent;\n            dispatch({\n              type: GET_STOCKS_COUNTRY_DATA_SUCCESS,\n              payload: result.data.stockcountries\n            });\n            _context2.next = 10;\n            break;\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: GET_STOCKS_COUNTRY_DATA_ERROR,\n              error: _context2.t0\n            });\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n_c2 = GET_STOCKS_COUNTRY_DATA;\nexport var GET_ALL_INDUSTRIES_DATA = function GET_ALL_INDUSTRIES_DATA(country) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dispatch) {\n      var result;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return Axios.post(\"/api/stocks/industries\", {\n              country: country\n            });\n          case 3:\n            result = _context3.sent;\n            dispatch({\n              type: GET_STOCKS_COUNTRY_DATA_SUCCESS,\n              payload: result.data.stockcountries\n            });\n            _context3.next = 10;\n            break;\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            dispatch({\n              type: GET_STOCKS_COUNTRY_DATA_ERROR,\n              error: _context3.t0\n            });\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3, null, [[0, 7]]);\n    }));\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\n_c3 = GET_ALL_INDUSTRIES_DATA;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GET_ALL_COUNTRIES_DATA\");\n$RefreshReg$(_c2, \"GET_STOCKS_COUNTRY_DATA\");\n$RefreshReg$(_c3, \"GET_ALL_INDUSTRIES_DATA\");","map":{"version":3,"names":["Axios","GET_ALL_COUNTRIES_SUCCESS","GET_ALL_COUNTRIES_ERROR","GET_STOCKS_COUNTRY_DATA_SUCCESS","GET_STOCKS_COUNTRY_DATA_ERROR","GET_ALL_INDUSTRIES_DATA_SUCCESS","GET_ALL_INDUSTRIES_DATA_ERROR","GET_ALL_COUNTRIES_DATA","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","result","wrap","_callee$","_context","prev","next","get","sent","type","payload","data","countries","t0","error","stop","_x","apply","arguments","_c","GET_STOCKS_COUNTRY_DATA","_ref2","_callee2","_callee2$","_context2","stockcountries","_x2","_c2","GET_ALL_INDUSTRIES_DATA","country","_ref3","_callee3","_callee3$","_context3","post","_x3","_c3","$RefreshReg$"],"sources":["/Users/mina/Code/stock-frontend-v2/src/actions/stocksAction.js"],"sourcesContent":["import Axios from \"axios\";\nimport {\n  GET_ALL_COUNTRIES_SUCCESS,\n  GET_ALL_COUNTRIES_ERROR,\n  GET_STOCKS_COUNTRY_DATA_SUCCESS,\n  GET_STOCKS_COUNTRY_DATA_ERROR,\n  GET_ALL_INDUSTRIES_DATA_SUCCESS,\n  GET_ALL_INDUSTRIES_DATA_ERROR,\n} from \"./actionTypes\";\n\nexport const GET_ALL_COUNTRIES_DATA = () => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.get(\"/api/stocks/countries\");\n      dispatch({\n        type: GET_ALL_COUNTRIES_SUCCESS,\n        payload: result.data.countries,\n      });\n    } catch (error) {\n      dispatch({ type: GET_ALL_COUNTRIES_ERROR, error });\n    }\n  };\n};\n\nexport const GET_STOCKS_COUNTRY_DATA = () => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.get(\"/api/stocks/stockcountry\");\n      dispatch({\n        type: GET_STOCKS_COUNTRY_DATA_SUCCESS,\n        payload: result.data.stockcountries,\n      });\n    } catch (error) {\n      dispatch({ type: GET_STOCKS_COUNTRY_DATA_ERROR, error });\n    }\n  };\n};\n\nexport const GET_ALL_INDUSTRIES_DATA = (country) => {\n  return async (dispatch) => {\n    try {\n      const result = await Axios.post(\"/api/stocks/industries\", {\n        country: country,\n      });\n      dispatch({\n        type: GET_STOCKS_COUNTRY_DATA_SUCCESS,\n        payload: result.data.stockcountries,\n      });\n    } catch (error) {\n      dispatch({ type: GET_STOCKS_COUNTRY_DATA_ERROR, error });\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}